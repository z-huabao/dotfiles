"language messages zh_CN.utf-8            " 解决consle输出乱码
"set noswapfile
set t_Co=256
set autoindent		      " 缩进
set shiftround
set shiftwidth=4
set expandtab             " 填充Tab
set fdm=indent   	      " 代码折叠，光标在缩进下方时用za命令折叠或展开这块代码
set foldlevel=3 	      " 默认展开3层，zm全部折叠一层，zr全部展开一层，zn全部展开
set cursorline            " 高亮光标行
set ignorecase
set autoread              " 文件修改之后自动载入
set autowrite		      " :next, :make 命令之前自动保存
set mouse=a		          " 允许使用鼠标
set number 	              " 设置行号
set relativenumber 	      " 设置相对行号
"set vbs=4                 " 日志verbose


" 切换行号显示
nnoremap <F2> :set nonu!<CR>:set relativenumber!<CR>


" 空格翻页
nnoremap <Space> <C-f>
nnoremap <Backspace> <C-b>
vnoremap <Space> <C-f>
vnoremap <Backspace> <C-b>

" 滚动
nnoremap <Down> <C-e><C-e><C-e><C-e>
nnoremap <Up> <C-y><C-y><C-y><C-y>
nnoremap <Left> F<Space>h
nnoremap <Right> f<Space>l
nnoremap <Home> ^
nnoremap <End> $

" 前进<C-l>，后退<C-o>
nnoremap <C-l> <C-i>

" normal模式下Ctrl+c全选并复制到系统剪贴板(linux必须装有vim-gnome)
" visual模式下Ctrl+c复制、ctrl+x剪切选中内容到剪贴板
" Ctrl+v原样粘贴剪切板内容
nmap <C-c> gg"+yG
vmap <C-c> "+y
vmap <C-x> x:let @+=@"<CR>

inoremap <C-v> <ESC>"+pa
inoremap <A-v> <C-v>

" w!!写入只读文件
cmap w!! w !sudo tee >/dev/null %:p

" 给当前单词添加引号
nnoremap '' viw<esc>a'<esc>hbi'<esc>lel
nnoremap "" viw<esc>a"<esc>hbi"<esc>lel
vnoremap '' c''<Esc>P
vnoremap "" c""<Esc>P

" 缩进文本
nnoremap > >>
nnoremap < <<
nnoremap <tab> >>
nnoremap <S-tab> <<
vnoremap > >gv
vnoremap < <gv
vnoremap <tab> >gv
vnoremap <S-tab> <gv

" Shift+y copy to end of current line
nnoremap Y y$

" upper, lower case recent text
nnoremap <Leader>u gu'[
nnoremap <Leader>U gU'[
nnoremap <Leader>` viw~

" edit and source vimrc
nnoremap <Leader>ev :split $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>

" emoji
inoremap <C-e> <C-X><C-U>

" 运行脚本

"""""""""""""""""""""""""TERMINAL MODE""""""""""""""""""""
tnoremap <Esc><Esc> <C-\><C-n>


augroup buffer_enter
    autocmd!
    execute 'normal! zn'
    autocmd BufEnter,TermOpen term://** call SetTermMap()
    autocmd BufReadPost * call PreOpenFile()
    "autocmd BufEnter,TermOpen term://*ranger* call RangerMap()

    autocmd FileType python nnoremap <buffer> dip Oimport ipdb; ipdb.set_trace()<C-[>
augroup endgroup

augroup buffer_leave
    autocmd!
    autocmd! bufwritepost init.vim source %    " vimrc文件修改之后自动加载
    autocmd BufWritePre * :%s/\s\+$//e       " 保存文件时自动删除行尾空格或Tab
    autocmd BufWritePre * :%s/^$\n\+\%$//ge  " 保存文件时自动删除末尾空行

    " quick leaves
    let s:bufs = ['quickfix', 'help']
    autocmd BufWinEnter * if index(s:bufs, &buftype)>=0 || bufname('%')=='coc://document'
                \| nnoremap <buffer> q :q<CR> | endif
    autocmd BufLeave * if 'quickfix'==&buftype | q | endif
augroup end

"""""""""""""""""""""""""WINDOW MANAGER""""""""""""""""""""

nnoremap <Esc> <C-w>
"inoremap <Esc> <C-\><C-n><C-w>
tnoremap <Esc> <C-\><C-n><C-w>

" window close
nnoremap <silent> <A-q> :q<CR>
tnoremap <silent> <A-q> <C-\><C-n>:q<CR>

" window previous window
nnoremap <silent> <Esc>p <C-w><C-p>
tnoremap <silent> <Esc>p <C-\><C-n><C-w><C-p>

" window maximum
nnoremap <silent> <Esc>z :ZoomToggle<CR>
tnoremap <silent> <Esc>z <C-\><C-n>:ZoomToggle<CR>

" window split/vsplit
set splitbelow
set splitright
nnoremap <silent> <Esc>s <C-w>s:terminal<CR>
nnoremap <silent> <Esc>v <C-w>v:terminal<CR>
nnoremap <silent> <Esc>_ <C-w>s:RangerCurrentDirectory<CR>
nnoremap <silent> <Esc>\| <C-w>v:RangerCurrentDirectory<CR>
tnoremap <silent> <Esc>s <C-\><C-n><C-w>s:terminal<CR>
tnoremap <silent> <Esc>v <C-\><C-n><C-w>v:terminal<CR>
tnoremap <silent> <Esc>_ <C-\><C-n><C-w>s:RangerWorkingDirectory<CR>
tnoremap <silent> <Esc>\| <C-\><C-n><C-w>v:RangerWorkingDirectory<CR>

" window resize
nnoremap <C-Left>  <C-w>3<
nnoremap <C-Right> <C-w>3>
nnoremap <C-Down>  <C-w>3-
nnoremap <C-Up>    <C-w>3+
tnoremap <C-Left>  <C-\><C-n><C-w>3<
tnoremap <C-Right> <C-\><C-n><C-w>3>
tnoremap <C-Down>  <C-\><C-n><C-w>3-
tnoremap <C-Up>    <C-\><C-n><C-w>3+


"""""""""""""""""""""""""TAB MANAGER""""""""""""""""""""
" tab new
nnoremap <silent> <Esc>c :tabnew +terminal<CR>
tnoremap <silent> <Esc>c <C-\><C-n>:tabnew +terminal<CR>

" tab navigation
nnoremap <silent> <Esc>n :tabnext<CR>
nnoremap <silent> <Esc>N :tabprevious<CR>
nnoremap <silent> <Esc>p :tabprevious<CR>
tnoremap <silent> <Esc>n <C-\><C-n>:tabnext<CR>
tnoremap <silent> <Esc>N <C-\><C-n>:tabprevious<CR>
tnoremap <silent> <Esc>p <C-\><C-n>:tabprevious<CR>

" tab navigation with number
nnoremap <silent> <Esc>0 :tablast<cr>
tnoremap <silent> <Esc>0 <C-\><C-n>:tablast<cr>
for i in range(1, 9)
    execute "nnoremap <Esc>" . i . " " . i . "gt"
    execute "tnoremap <Esc>" . i . " <C-\\><C-n>" . i . "gt"
endfor

" Go to last active tab
autocmd TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> <Esc>b :execute "tabn ".g:lasttab<cr>
tnoremap <silent> <Esc>b <C-\><C-n>:execute "tabn ".g:lasttab<cr>
